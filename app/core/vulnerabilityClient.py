import os

from app.core.databaseClient import DatabaseClient
from app.models.vulnerability import Vulnerability


class VulnerabilityClient(DatabaseClient):
    def __init__(self):
        super().__init__()

    def get_collection(self):
        return self.client[os.getenv("MONGODB_DB", "shield")]["vulnerabilityreports"]

    def _get_all(
        self, namespace: str = None, cluster: str = None, severity: str = None
    ):
        """Internal method to get all vulnerabilities based on filters."""
        query = {}
        if namespace:
            query["_namespace"] = namespace
        if cluster:
            query["_cluster"] = cluster
        if severity:
            query["data.report.vulnerabilities.severity"] = severity

        return self.get_collection().find(query, {"_id": 0})

    def get_all(self, namespace: str = None, cluster: str = None, severity: str = None):
        all_vulnerabilities = []
        for item in self._get_all(
            namespace=namespace, cluster=cluster, severity=severity
        ):
            all_vulnerabilities.append(self._format(item))
        return all_vulnerabilities

    def get_flattened(
        self, namespace: str = None, cluster: str = None, severity: str = None
    ):
        all_vulnerabilities = []
        for item in self._get_all(
            namespace=namespace, cluster=cluster, severity=severity
        ):
            all_vulnerabilities.extend(self._format_flatten(item))
        return all_vulnerabilities

    def get_by_uid(self, uid: str):
        item = self.get_collection().find_one({"_uid": uid}, {"_id": 0})
        return self._format_flatten(item)

    def _format(self, report):
        if report is None:
            return None

        uid = report.get("_uid", "")
        cluster = report.get("_cluster", "")
        namespace = report.get("_namespace", "")
        pod_id = str(report.get("data", {}).get("metadata", {}).get("uid", ""))
        target = (
            report.get("data", {})
            .get("report", {})
            .get("artifact", {})
            .get("repository", "")
        )

        vulnerabilities = []
        for vuln in report.get("data", {}).get("report", {}).get("vulnerabilities", []):
            vulnerability_data = {
                "vulnerabilityID": vuln.get("vulnerabilityID", ""),
            }
            try:
                vulnerabilities.append(vulnerability_data)
            except Exception as e:
                print(f"Error creating vulnerability object: {e}")
                continue

        return {
            "uid": uid,
            "target": target,
            "pod_id": pod_id,
            "cluster": cluster,
            "namespace": namespace,
            "vulnerabilities": vulnerabilities,
        }

    def _format_flatten(self, report):
        if report is None:
            return None

        uid = report.get("_uid", "")
        if report is None:
            return None

        vulnerabilities = (
            report.get("data", {}).get("report", {}).get("vulnerabilities", [])
        )

        if not vulnerabilities:
            return []

        cluster = report.get("_cluster", "")
        namespace = report.get("_namespace", "")
        pod_id = str(report.get("data", {}).get("metadata", {}).get("uid", ""))
        target = (
            report.get("data", {})
            .get("report", {})
            .get("artifact", {})
            .get("repository", "")
        )

        vulnerability_objects = []
        for vuln in vulnerabilities:
            vulnerability_data = {
                "title": vuln.get("title", ""),
                "uid": uid,
                "fixedVersion": vuln.get("fixedVersion", ""),
                "installedVersion": vuln.get("installedVersion", ""),
                "lastModifiedDate": vuln.get("lastModifiedDate", ""),
                "links": vuln.get("links", []),
                "packagePURL": vuln.get("packagePURL", ""),
                "primaryLink": vuln.get("primaryLink", ""),
                "publishedDate": vuln.get("publishedDate", ""),
                "resource": vuln.get("resource", ""),
                "score": vuln.get("score", 0.0),
                "severity": vuln.get("severity", ""),
                "target": target,
                "vulnerabilityID": vuln.get("vulnerabilityID", ""),
                "pod_id": pod_id,
                "cluster": cluster,
                "namespace": namespace,
                "description": vuln.get("title", ""),
            }
            try:
                vulnerability_objects.append(Vulnerability(**vulnerability_data))
            except Exception as e:
                print(f"Error creating vulnerability object: {e}")
                continue

        return vulnerability_objects

import os

from app.core.databaseClient import DatabaseClient
from app.models.vulnerability import Vulnerability


class VulnerabilityClient(DatabaseClient):
    def __init__(self):
        super().__init__()

    def get_collection(self):
        return self.client[os.getenv("MONGODB_DB", "shield")]["vulnerabilities"]

    def get_all(self, namespace: str = None, cluster: str = None, severity: str = None):
        query = {}
        if namespace:
            query["namespace"] = namespace
        if cluster:
            query["cluster"] = cluster
        if severity:
            query["severity"] = severity
        items = self.get_collection().find(query, {"_id": 0})
        items_list = list(items)
        return [self._format_to_vulnerability(item) for item in items_list]

    def get_by_hash(self, hash: str):
        item = self.get_collection().find_one({"hash": hash}, {"_id": 0})
        return self._format_to_vulnerability(item)

    def _format_to_vulnerability(self, item):
        if "_id" in item:
            item["_id"] = str(item["_id"])
        if "pod_id" in item:
            item["pod_id"] = str(item["pod_id"])
        if "vulnerabilityID" in item:
            item["vulnerabilityID"] = str(item["vulnerabilityID"])
        # Ensure 'links' is a list for Pydantic validation
        if "links" in item and item["links"] is None:
            item["links"] = []
        return Vulnerability(**item)

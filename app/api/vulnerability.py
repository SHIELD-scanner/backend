from typing import List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query

from app.core.vulnerabilityClient import VulnerabilityClient
from app.models.vulnerability import Vulnerability

router = APIRouter()


def get_vulnerability_client() -> VulnerabilityClient:
    """Dependency to get VulnerabilityClient instance."""
    return VulnerabilityClient()


@router.get("/", response_model=List[Vulnerability])
def list_vulnerabilities(
    namespace: Optional[str] = Query(None),
    cluster: Optional[str] = Query(None),
    severity: Optional[str] = Query(None),
    db: VulnerabilityClient = Depends(get_vulnerability_client),
):
    """List all vulnerabilities in the cluster."""
    return db.get_all(namespace=namespace, cluster=cluster, severity=severity)


@router.get("/{uid}", response_model=List[Vulnerability])
def show_vulnerability(
    uid: str, db: VulnerabilityClient = Depends(get_vulnerability_client)
):
    """Show vulnerabilities for a specific UID."""
    vulnerabilities = db.get_by_uid(uid)
    if not vulnerabilities:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    return vulnerabilities

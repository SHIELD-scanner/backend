"""Tests for vulnerabilityClient module."""

from unittest.mock import Mock

from app.core.vulnerabilityClient import VulnerabilityClient
from app.models.old_vulnerability import Vulnerability


class TestVulnerabilityClient:
    """Test class for VulnerabilityClient."""

    def test_format_to_vulnerability_method(self):
        """Test the _format_to_vulnerability method converts MongoDB document to Vulnerability objects."""
        client = VulnerabilityClient()

        # Mock MongoDB document with nested structure
        mock_item = {
            "_cluster": "test-cluster",
            "_namespace": "test-namespace",
            "data": {
                "metadata": {"uid": "pod-123"},
                "report": {
                    "artifact": {"repository": "test-repo"},
                    "vulnerabilities": [
                        {
                            "vulnerabilityID": "CVE-2023-1234",
                            "severity": "HIGH",
                            "title": "Test Vulnerability",
                        }
                    ],
                },
            },
        }

        result = client._format_to_vulnerability(mock_item)

        assert isinstance(result, list)
        assert len(result) == 1
        vuln = result[0]
        assert vuln.cluster == "test-cluster"
        assert vuln.namespace == "test-namespace"
        assert vuln.pod_id == "pod-123"
        assert vuln.target == "test-repo"

    def test_format_method_with_missing_fields(self):
        """Test _format_to_vulnerability method with missing nested fields."""
        client = VulnerabilityClient()

        # MongoDB document with missing nested data
        mock_item = {
            "_cluster": "test-cluster",
            "_namespace": "test-namespace",
            "data": {},
        }

        result = client._format_to_vulnerability(mock_item)

        # _format_to_vulnerability returns a list, or empty list if no vulnerabilities
        assert isinstance(result, list)
        assert len(result) == 0  # No vulnerabilities in empty data

    def test_format_method_completely_empty(self):
        """Test _format_to_vulnerability method with completely empty document."""
        client = VulnerabilityClient()

        result = client._format_to_vulnerability({})

        assert isinstance(result, list)
        assert len(result) == 0

    def test_format_method_with_empty_vulnerabilities(self):
        """Test _format_to_vulnerability method when vulnerabilities array is empty."""
        client = VulnerabilityClient()

        mock_item = {
            "_cluster": "test-cluster",
            "_namespace": "test-namespace",
            "data": {"metadata": {"uid": "pod-123"}, "report": {"vulnerabilities": []}},
        }

        result = client._format_to_vulnerability(mock_item)

        assert isinstance(result, list)
        assert len(result) == 0  # Empty vulnerabilities array

    def test_get_by_hash_found(self):
        """Test get_by_hash method when vulnerability is found."""
        client = VulnerabilityClient()

        # Mock MongoDB document
        mock_doc = {
            "_cluster": "test-cluster",
            "_namespace": "test-namespace",
            "data": {
                "metadata": {"uid": "pod-123"},
                "report": {
                    "vulnerabilities": [
                        {"vulnerabilityID": "CVE-2023-1234", "severity": "HIGH"}
                    ]
                },
            },
        }

        # Mock the collection
        mock_collection = Mock()
        mock_collection.find.return_value = [mock_doc]
        client.get_collection = Mock(return_value=mock_collection)

        # The actual get_by_hash method expects a hash string
        # Let's use a hash that would be generated from the test data
        test_hash = "test-hash-123"

        # We need to mock the _format_to_vulnerability method to return a vulnerability with our test hash
        mock_vulnerability = Mock()
        mock_vulnerability.hash = test_hash
        client._format_to_vulnerability = Mock(return_value=[mock_vulnerability])

        result = client.get_by_hash(test_hash)

        assert result is not None
        assert result.hash == test_hash

        # Verify the MongoDB query
        mock_collection.find.assert_called_once_with({}, {"_id": 0})

    def test_get_by_hash_not_found(self):
        """Test get_by_hash method when vulnerability is not found."""
        client = VulnerabilityClient()

        # Mock collection returning empty list
        mock_collection = Mock()
        mock_collection.find.return_value = []
        client.get_collection = Mock(return_value=mock_collection)

        result = client.get_by_hash("nonexistent")

        assert result is None
        mock_collection.find.assert_called_once_with({}, {"_id": 0})

    def test_get_all_method(self):
        """Test get_all method returns list of Vulnerability objects."""
        client = VulnerabilityClient()

        # Mock the collection and cursor
        mock_collection = Mock()
        mock_cursor = Mock()
        mock_cursor.__iter__ = Mock(
            return_value=iter(
                [
                    {
                        "_cluster": "cluster1",
                        "_namespace": "ns1",
                        "data": {
                            "metadata": {"uid": "pod1"},
                            "report": {
                                "vulnerabilities": [
                                    {
                                        "vulnerabilityID": "CVE-2023-0001",
                                        "severity": "HIGH",
                                        "resource": "library1",
                                    }
                                ]
                            },
                        },
                    },
                    {
                        "_cluster": "cluster2",
                        "_namespace": "ns2",
                        "data": {
                            "metadata": {"uid": "pod2"},
                            "report": {
                                "vulnerabilities": [
                                    {
                                        "vulnerabilityID": "CVE-2023-0002",
                                        "severity": "MEDIUM",
                                        "resource": "library2",
                                    }
                                ]
                            },
                        },
                    },
                ]
            )
        )

        mock_collection.find.return_value = mock_cursor
        client.get_collection = Mock(return_value=mock_collection)

        result = list(client.get_all())

        assert len(result) == 2
        assert all(isinstance(vuln, Vulnerability) for vuln in result)
        assert result[0].pod_id == "pod1"
        assert result[1].pod_id == "pod2"

        # Verify the MongoDB query
        mock_collection.find.assert_called_once_with({}, {"_id": 0})

    def test_get_all_empty_collection(self):
        """Test get_all method with empty collection."""
        client = VulnerabilityClient()

        # Mock empty collection
        mock_collection = Mock()
        mock_cursor = Mock()
        mock_cursor.__iter__ = Mock(return_value=iter([]))

        mock_collection.find.return_value = mock_cursor
        client.get_collection = Mock(return_value=mock_collection)

        result = list(client.get_all())

        assert len(result) == 0
        assert isinstance(result, list)

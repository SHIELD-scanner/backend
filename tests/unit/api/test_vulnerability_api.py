"""Unit tests for vulnerability API endpoints."""
import pytest
from fastapi.testclient import TestClient
from unittest.mock import Mock, patch
from app.models.vulnerability import Vulnerability


class TestVulnerabilityAPI:
    """Test cases for Vulnerability API endpoints."""

    @pytest.fixture
    def mock_client_dependency(self):
        """Mock the get_vulnerability_client dependency."""
        mock_client = Mock()
        return mock_client

    def test_list_vulnerabilities_no_filters(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with no filters."""
        mock_vulns = [
            Vulnerability(vulnerabilityID="CVE-1", severity="HIGH", score=7.0),
            Vulnerability(vulnerabilityID="CVE-2", severity="CRITICAL", score=9.0)
        ]
        mock_client_dependency.get_all.return_value = mock_vulns
        
        with patch('app.api.vulnerability.get_vulnerability_client', return_value=mock_client_dependency):
            response = client.get("/vulnerabilities/")
        
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 2
        assert data[0]["vulnerabilityID"] == "CVE-1"
        assert data[1]["vulnerabilityID"] == "CVE-2"
        mock_client_dependency.get_all.assert_called_once_with(
            namespace=None, cluster=None, severity=None
        )

    def test_list_vulnerabilities_with_filters(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with all filters."""
        mock_vulns = [
            Vulnerability(
                vulnerabilityID="CVE-1", 
                severity="HIGH", 
                score=7.0,
                namespace="test-ns",
                cluster="test-cluster"
            )
        ]
        mock_client_dependency.get_all.return_value = mock_vulns
        
        with patch('app.api.vulnerability.get_vulnerability_client', return_value=mock_client_dependency):
            response = client.get("/vulnerabilities/?namespace=test-ns&cluster=test-cluster&severity=HIGH")
        
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["severity"] == "HIGH"
        mock_client_dependency.get_all.assert_called_once_with(
            namespace="test-ns", cluster="test-cluster", severity="HIGH"
        )

    def test_show_vulnerability_found(self, client, mock_client_dependency, sample_vulnerability):
        """Test GET /vulnerabilities/{hash} endpoint with existing vulnerability."""
        mock_client_dependency.get_by_hash.return_value = sample_vulnerability
        
        with patch('app.api.vulnerability.get_vulnerability_client', return_value=mock_client_dependency):
            response = client.get("/vulnerabilities/test-hash")
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["cluster"] == "test-cluster"
        assert data["namespace"] == "test-namespace"
        
        mock_client_dependency.get_by_hash.assert_called_once_with("test-hash")

    def test_show_vulnerability_not_found(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/{hash} endpoint with non-existent hash."""
        mock_client_dependency.get_by_hash.return_value = None
        
        with patch('app.api.vulnerability.get_vulnerability_client', return_value=mock_client_dependency):
            response = client.get("/vulnerabilities/nonexistent-hash")
        
        assert response.status_code == 404
        mock_client_dependency.get_by_hash.assert_called_once_with("nonexistent-hash")

    def test_list_vulnerabilities_severity_filter(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with severity filter only."""
        mock_vulns = [
            Vulnerability(vulnerabilityID="CVE-1", severity="CRITICAL", score=9.0)
        ]
        mock_client_dependency.get_all.return_value = mock_vulns
        
        with patch('app.api.vulnerability.get_vulnerability_client', return_value=mock_client_dependency):
            response = client.get("/vulnerabilities/?severity=CRITICAL")
        
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["severity"] == "CRITICAL"
        mock_client_dependency.get_all.assert_called_once_with(
            namespace=None, cluster=None, severity="CRITICAL"
        )

    def test_list_vulnerabilities_empty_result(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with empty result."""
        mock_client_dependency.get_all.return_value = []
        
        with patch('app.api.vulnerability.get_vulnerability_client', return_value=mock_client_dependency):
            response = client.get("/vulnerabilities/")
        
        assert response.status_code == 200
        data = response.json()
        assert data == []

    def test_dependency_injection_working(self, client):
        """Test that dependency injection is properly configured."""
        with patch('app.api.vulnerability.get_vulnerability_client') as mock_dep:
            mock_client = Mock()
            mock_client.get_all.return_value = []
            mock_dep.return_value = mock_client
            
            response = client.get("/vulnerabilities/")
            
            assert response.status_code == 200
            mock_dep.assert_called_once()

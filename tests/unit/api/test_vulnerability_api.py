"""Unit tests for vulnerability API endpoints."""

from unittest.mock import Mock

import pytest

from app.api.vulnerability import get_vulnerability_client
from app.models.vulnerability import Vulnerability


class TestVulnerabilityAPI:

    """Test cases for Vulnerability API endpoints."""

    @pytest.fixture
    def mock_client_dependency(self):
        """Mock the get_vulnerability_client dependency."""
        mock_client = Mock()
        return mock_client

    def test_list_vulnerabilities_no_filters(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with no filters."""
        mock_vulns = [
            Vulnerability(vulnerabilityID="CVE-1", severity="HIGH", score=7.0),
            Vulnerability(vulnerabilityID="CVE-2", severity="CRITICAL", score=9.0),
        ]
        mock_client_dependency.get_all.return_value = mock_vulns

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )

        try:
            response = client.get("/vulnerabilities/")
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 200
        data = response.json()
        assert len(data) == 2
        assert data[0]["vulnerabilityID"] == "CVE-1"
        assert data[1]["vulnerabilityID"] == "CVE-2"
        mock_client_dependency.get_all.assert_called_once_with(
            namespace=None, cluster=None, severity=None
        )

    def test_list_vulnerabilities_with_filters(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with all filters."""
        mock_vulns = [
            Vulnerability(
                vulnerabilityID="CVE-1",
                severity="HIGH",
                score=7.0,
                namespace="test-ns",
                cluster="test-cluster",
            )
        ]
        mock_client_dependency.get_all.return_value = mock_vulns

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )

        try:
            response = client.get(
                "/vulnerabilities/?namespace=test-ns&cluster=test-cluster&severity=HIGH"
            )
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["severity"] == "HIGH"
        mock_client_dependency.get_all.assert_called_once_with(
            namespace="test-ns", cluster="test-cluster", severity="HIGH"
        )

    def test_show_vulnerability_found(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/{uid} endpoint with existing vulnerabilities."""
        # Mock to return a list of formatted Vulnerability objects
        expected_vulnerabilities = [
            Vulnerability(
                vulnerabilityID="CVE-2021-1234",
                severity="HIGH",
                score=7.5,
                namespace="test-namespace",
                cluster="test-cluster",
                uid="test-uid",
            )
        ]
        mock_client_dependency.get_by_uid.return_value = expected_vulnerabilities

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )

        try:
            response = client.get("/vulnerabilities/test-uid")
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["cluster"] == "test-cluster"
        assert data[0]["namespace"] == "test-namespace"
        assert data[0]["vulnerabilityID"] == "CVE-2021-1234"

        mock_client_dependency.get_by_uid.assert_called_once_with("test-uid")

    def test_show_vulnerability_not_found(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/{uid} endpoint with non-existent uid."""
        mock_client_dependency.get_by_uid.return_value = []

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )

        try:
            response = client.get("/vulnerabilities/nonexistent-uid")
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 404
        mock_client_dependency.get_by_uid.assert_called_once_with("nonexistent-uid")

    def test_list_vulnerabilities_severity_filter(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with severity filter only."""
        mock_vulns = [
            Vulnerability(vulnerabilityID="CVE-1", severity="CRITICAL", score=9.0)
        ]
        mock_client_dependency.get_all.return_value = mock_vulns

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )

        try:
            response = client.get("/vulnerabilities/?severity=CRITICAL")
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["severity"] == "CRITICAL"
        mock_client_dependency.get_all.assert_called_once_with(
            namespace=None, cluster=None, severity="CRITICAL"
        )

    def test_list_vulnerabilities_empty_result(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/ with empty result."""
        mock_client_dependency.get_all.return_value = []

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )

        try:
            response = client.get("/vulnerabilities/")
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 200
        data = response.json()
        assert data == []

    def test_dependency_injection_working(self, client):
        """Test that dependency injection is properly configured."""
        mock_client = Mock()
        mock_client.get_all.return_value = []

        # Override the dependency
        client.app.dependency_overrides[get_vulnerability_client] = lambda: mock_client

        try:
            response = client.get("/vulnerabilities/")
        finally:
            # Clean up the override
            client.app.dependency_overrides.clear()

        assert response.status_code == 200
        # Verify the mock was called
        mock_client.get_all.assert_called_once()

"""Unit tests for vulnerability API /vulnerabilities/flatten endpoint."""

from unittest.mock import Mock

import pytest

from app.api.vulnerability import get_vulnerability_client
from app.models.vulnerability import Vulnerability


class TestVulnerabilityFlattenAPI:

    """Test cases for Vulnerability API /vulnerabilities/flatten endpoint."""

    @pytest.fixture
    def mock_client_dependency(self):
        mock_client = Mock()
        return mock_client

    def test_list_vulnerabilities_flatten_no_filters(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/flatten with no filters."""
        mock_vulns = [
            Vulnerability(vulnerabilityID="CVE-1", severity="HIGH", score=7.0),
            Vulnerability(vulnerabilityID="CVE-2", severity="CRITICAL", score=9.0),
        ]
        mock_client_dependency.get_flattened.return_value = mock_vulns
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )
        try:
            response = client.get("/vulnerabilities/flatten")
        finally:
            client.app.dependency_overrides.clear()
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 2
        assert data[0]["vulnerabilityID"] == "CVE-1"
        assert data[1]["vulnerabilityID"] == "CVE-2"
        mock_client_dependency.get_flattened.assert_called_once_with(
            namespace=None, cluster=None, severity=None
        )

    def test_list_vulnerabilities_flatten_with_filters(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/flatten with all filters."""
        mock_vulns = [
            Vulnerability(
                vulnerabilityID="CVE-1",
                severity="HIGH",
                score=7.0,
                namespace="test-ns",
                cluster="test-cluster",
            )
        ]
        mock_client_dependency.get_flattened.return_value = mock_vulns
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )
        try:
            response = client.get(
                "/vulnerabilities/flatten?namespace=test-ns&cluster=test-cluster&severity=HIGH"
            )
        finally:
            client.app.dependency_overrides.clear()
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["severity"] == "HIGH"
        mock_client_dependency.get_flattened.assert_called_once_with(
            namespace="test-ns", cluster="test-cluster", severity="HIGH"
        )

    def test_list_vulnerabilities_flatten_empty_result(self, client, mock_client_dependency):
        """Test GET /vulnerabilities/flatten with empty result."""
        mock_client_dependency.get_flattened.return_value = []
        client.app.dependency_overrides[get_vulnerability_client] = (
            lambda: mock_client_dependency
        )
        try:
            response = client.get("/vulnerabilities/flatten")
        finally:
            client.app.dependency_overrides.clear()
        assert response.status_code == 200
        data = response.json()
        assert data == []

"""Unit tests for Vulnerability model."""
import pytest
from pydantic import ValidationError
from app.models.vulnerability import Vulnerability


class TestVulnerability:
    """Test cases for Vulnerability model."""

    def test_vulnerability_creation_with_all_fields(self):
        """Test creating Vulnerability with all fields."""
        vuln = Vulnerability(
            vulnerabilityID="CVE-2021-1234",
            severity="HIGH",
            score=7.5,
            resource="test-package",
            installedVersion="1.0.0",
            fixedVersion="1.0.1",
            namespace="test-namespace",
            cluster="test-cluster",
            pod_id="pod-123",
            target="test-target",
            description="Test vulnerability",
            hash="abc123"
        )
        
        assert vuln.vulnerabilityID == "CVE-2021-1234"
        assert vuln.severity == "HIGH"
        assert vuln.score == 7.5
        assert vuln.resource == "test-package"

    def test_vulnerability_field_validation(self):
        """Test that vulnerability fields accept appropriate values."""
        vuln_data = {
            "vulnerabilityID": "CVE-2021-1234",
            "severity": "CRITICAL",
            "score": 9.0,
            "resource": "vulnerable-package"
        }
        
        vuln = Vulnerability(**vuln_data)
        
        assert isinstance(vuln.vulnerabilityID, str)
        assert isinstance(vuln.severity, str)
        assert isinstance(vuln.score, (int, float))
        assert isinstance(vuln.resource, str)

    def test_vulnerability_dict_conversion(self):
        """Test converting Vulnerability to dictionary."""
        vuln = Vulnerability(
            vulnerabilityID="CVE-2021-1234",
            severity="HIGH",
            score=7.5
        )
        
        vuln_dict = vuln.model_dump()
        
        assert "vulnerabilityID" in vuln_dict
        assert "severity" in vuln_dict
        assert "score" in vuln_dict
        assert vuln_dict["vulnerabilityID"] == "CVE-2021-1234"

    def test_vulnerability_from_dict(self):
        """Test creating Vulnerability from dictionary."""
        data = {
            "vulnerabilityID": "CVE-2021-1234",
            "severity": "HIGH",
            "score": 7.5,
            "resource": "test-package"
        }
        
        vuln = Vulnerability(**data)
        
        assert vuln.vulnerabilityID == "CVE-2021-1234"
        assert vuln.severity == "HIGH"
        assert vuln.score == 7.5

    def test_vulnerability_equality(self):
        """Test Vulnerability equality comparison."""
        vuln1 = Vulnerability(vulnerabilityID="CVE-1", severity="HIGH", score=7.0)
        vuln2 = Vulnerability(vulnerabilityID="CVE-1", severity="HIGH", score=7.0)
        vuln3 = Vulnerability(vulnerabilityID="CVE-2", severity="HIGH", score=7.0)
        
        assert vuln1 == vuln2
        assert vuln1 != vuln3
